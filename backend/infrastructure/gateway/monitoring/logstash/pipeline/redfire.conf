input {
  # 从文件读取日志
  file {
    path => "/app/logs/*.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    tags => ["redfire", "application"]
  }
  
  # 从TCP端口接收日志
  tcp {
    port => 5044
    codec => "json_lines"
    tags => ["redfire", "tcp"]
  }
  
  # 从UDP端口接收日志
  udp {
    port => 5045
    codec => "json"
    tags => ["redfire", "udp"]
  }
  
  # 从beats接收日志
  beats {
    port => 5046
    tags => ["redfire", "beats"]
  }
}

filter {
  # 解析RedFire应用日志
  if "redfire" in [tags] {
    # 添加时间戳
    if ![timestamp] {
      mutate {
        add_field => { "timestamp" => "%{@timestamp}" }
      }
    }
    
    # 解析日志级别
    if [level] {
      mutate {
        uppercase => [ "level" ]
      }
    }
    
    # 解析服务名称
    if [service] {
      mutate {
        add_field => { "service_name" => "%{service}" }
      }
    }
    
    # 解析请求ID
    if [request_id] {
      mutate {
        add_field => { "trace_id" => "%{request_id}" }
      }
    }
    
    # 解析VnPy相关日志
    if [message] =~ /vnpy|gateway|strategy/ {
      mutate {
        add_tag => ["vnpy", "trading"]
      }
      
      # 提取网关信息
      if [message] =~ /gateway/ {
        grok {
          match => { "message" => "gateway\[%{WORD:gateway_name}\]" }
          tag_on_failure => ["_grokparsefailure_gateway"]
        }
      }
      
      # 提取策略信息
      if [message] =~ /strategy/ {
        grok {
          match => { "message" => "strategy\[%{WORD:strategy_name}\]" }
          tag_on_failure => ["_grokparsefailure_strategy"]
        }
      }
    }
    
    # 解析HTTP请求日志
    if [message] =~ /HTTP|GET|POST|PUT|DELETE/ {
      mutate {
        add_tag => ["http", "api"]
      }
      
      grok {
        match => { 
          "message" => "%{WORD:http_method} %{URIPATH:uri_path}(?:%{URIPARAM:uri_params})? HTTP/%{NUMBER:http_version} %{NUMBER:response_code:int} %{NUMBER:response_time:float}"
        }
        tag_on_failure => ["_grokparsefailure_http"]
      }
    }
    
    # 解析错误日志
    if [level] == "ERROR" or [level] == "CRITICAL" {
      mutate {
        add_tag => ["error", "alert"]
      }
      
      # 提取异常信息
      if [message] =~ /Exception|Error|Traceback/ {
        mutate {
          add_tag => ["exception"]
        }
      }
    }
    
    # 解析性能指标
    if [message] =~ /latency|response_time|duration/ {
      mutate {
        add_tag => ["performance", "metrics"]
      }
    }
    
    # 地理位置信息（如果有IP地址）
    if [client_ip] {
      geoip {
        source => "client_ip"
        target => "geoip"
      }
    }
    
    # 用户代理解析
    if [user_agent] {
      useragent {
        source => "user_agent"
        target => "ua"
      }
    }
  }
  
  # 数据清理
  mutate {
    # 移除不需要的字段
    remove_field => ["host", "path", "@version"]
    
    # 添加索引前缀
    add_field => { "[@metadata][index_prefix]" => "redfire" }
  }
  
  # 日期处理
  date {
    match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd'T'HH:mm:ss.SSSZ" ]
    target => "@timestamp"
  }
}

output {
  # 输出到Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "redfire-logs-%{+YYYY.MM.dd}"
    template_name => "redfire"
    template => "/usr/share/logstash/templates/redfire-template.json"
    template_overwrite => true
  }
  
  # 错误日志输出到专门的索引
  if "error" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "redfire-errors-%{+YYYY.MM.dd}"
    }
  }
  
  # VnPy交易日志输出到专门的索引
  if "vnpy" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "redfire-trading-%{+YYYY.MM.dd}"
    }
  }
  
  # 性能指标输出到专门的索引
  if "performance" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "redfire-metrics-%{+YYYY.MM.dd}"
    }
  }
  
  # 调试输出到控制台
  if [@metadata][debug] {
    stdout {
      codec => rubydebug
    }
  }
}
