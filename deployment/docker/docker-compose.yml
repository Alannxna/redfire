version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: redfire_postgres
    environment:
      POSTGRES_DB: redfire
      POSTGRES_USER: redfire_user
      POSTGRES_PASSWORD: redfire_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - redfire_network
    restart: unless-stopped

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: redfire_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - redfire_network
    restart: unless-stopped

  # 后端API服务
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: redfire_backend
    environment:
      - DATABASE_URL=postgresql://redfire_user:redfire_password@postgres:5432/redfire
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=production
    volumes:
      - ../../backend:/app
      - /app/__pycache__
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - redfire_network
    restart: unless-stopped

  # 前端Web应用
  frontend:
    build:
      context: ../../frontend/web-app
      dockerfile: Dockerfile
    container_name: redfire_frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - redfire_network
    restart: unless-stopped

  # 管理后台
  admin-dashboard:
    build:
      context: ../../frontend/admin-dashboard
      dockerfile: Dockerfile
    container_name: redfire_admin
    ports:
      - "3001:3000"
    depends_on:
      - backend
    networks:
      - redfire_network
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: redfire_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ../../frontend/web-app/dist:/usr/share/nginx/html
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - admin-dashboard
      - backend
    networks:
      - redfire_network
    restart: unless-stopped

  # 监控服务
  prometheus:
    image: prom/prometheus:latest
    container_name: redfire_prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - redfire_network
    restart: unless-stopped

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: redfire_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    networks:
      - redfire_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  redfire_network:
    driver: bridge
