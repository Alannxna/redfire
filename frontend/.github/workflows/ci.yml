# RedFire前端CI/CD工作流
# =========================

name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'
  workflow_dispatch:

# 取消之前的运行
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

jobs:
  # 变更检测
  changes:
    name: 🔍 检测变更
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      packages: ${{ steps.changes.outputs.packages }}
      apps: ${{ steps.changes.outputs.apps }}
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 检测路径变更
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            packages:
              - 'frontend/packages/**'
            apps:
              - 'frontend/apps/**'

  # 代码质量检查
  quality:
    name: 🔍 代码质量
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📱 安装依赖
        run: npm ci

      - name: 🔍 ESLint检查
        run: npm run lint

      - name: 💅 Prettier检查
        run: npm run format:check

      - name: 🔤 TypeScript检查
        run: npm run type-check

  # 测试
  test:
    name: 🧪 测试
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    defaults:
      run:
        working-directory: frontend
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📱 安装依赖
        run: npm ci

      - name: 🧪 运行单元测试
        run: npm run test:coverage

      - name: 📊 上传覆盖率报告
        uses: codecov/codecov-action@v3
        if: matrix.node-version == 18
        with:
          directory: frontend/coverage
          flags: frontend
          name: frontend-coverage

  # 构建
  build:
    name: 🏗️ 构建
    runs-on: ubuntu-latest
    needs: [quality, test]
    if: needs.changes.outputs.frontend == 'true'
    defaults:
      run:
        working-directory: frontend
    strategy:
      matrix:
        app: [web-app, mobile-app, admin-dashboard, trading-terminal]
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📱 安装依赖
        run: npm ci

      - name: 🏗️ 构建 ${{ matrix.app }}
        run: npm run build:${{ matrix.app }}

      - name: 📦 上传构建产物
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.app }}-build
          path: frontend/apps/${{ matrix.app }}/dist
          retention-days: 7

  # E2E测试
  e2e:
    name: 🎭 E2E测试
    runs-on: ubuntu-latest
    needs: build
    if: needs.changes.outputs.apps == 'true'
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📦 设置Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📱 安装依赖
        run: npm ci

      - name: 📥 下载构建产物
        uses: actions/download-artifact@v3
        with:
          name: web-app-build
          path: frontend/apps/web-app/dist

      - name: 🎭 运行E2E测试
        run: npm run test:e2e

      - name: 📸 上传测试截图
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-screenshots
          path: frontend/test-results

  # Docker构建
  docker:
    name: 🐳 Docker构建
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 🐳 设置Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: 🔐 登录容器注册表
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ 提取元数据
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ 构建和推送Docker镜像
        uses: docker/build-push-action@v4
        with:
          context: frontend
          file: frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # 部署到预览环境
  deploy-preview:
    name: 🚀 部署预览
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.event_name == 'pull_request'
    environment:
      name: preview-${{ github.event.number }}
      url: https://redfire-frontend-pr-${{ github.event.number }}.vercel.app
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📥 下载构建产物
        uses: actions/download-artifact@v3
        with:
          name: web-app-build
          path: frontend/apps/web-app/dist

      - name: 🚀 部署到Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: frontend/apps/web-app
          alias-domains: redfire-frontend-pr-${{ github.event.number }}.vercel.app

  # 部署到生产环境
  deploy-production:
    name: 🌟 部署生产
    runs-on: ubuntu-latest
    needs: [e2e, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://redfire.com
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: 📥 检出代码
        uses: actions/checkout@v4

      - name: 📥 下载构建产物
        uses: actions/download-artifact@v3
        with:
          name: web-app-build
          path: frontend/apps/web-app/dist

      - name: 🚀 部署到生产环境
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: frontend/apps/web-app

  # 通知
  notify:
    name: 📢 通知
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-preview]
    if: always()
    steps:
      - name: 📢 发送通知
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#redfire-ci'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
